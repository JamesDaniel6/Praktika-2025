# -*- coding: utf-8 -*-
# coding: utf-8
import telebot
import random
import time
from telebot import types

BOT_TOKEN = "7711127822:AAEEIapQP7OMJs9hoyHFutobk43azFV0sjo"
bot = telebot.TeleBot(BOT_TOKEN)

# --- Глобальные переменные для "Угадай число" ---
guess_min = 1
guess_max = 100
guess_number = 0
secret_number = 0
attempts = 0

# --- Глобальные переменные для "Орел и решка" ---
coin_side = ""

# --- Глобальные переменные для "Крестики-нолики" ---
board = ['⬜'] * 9  # Изначально заполняем доску белыми квадратами
current_player = 'X'  # 'X' - игрок, 'O' - бот

# --- Главное меню ---
def show_main_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    rps = types.KeyboardButton("Камень, ножницы, бумага")
    bot_guess = types.KeyboardButton("Бот угадывает число")
    user_guess = types.KeyboardButton("Я угадываю число")
    coin_flip = types.KeyboardButton("Орел и решка")
    russian_roulette = types.KeyboardButton("Русская рулетка")
    tic_tac_toe = types.KeyboardButton("Крестики-нолики")  # Новая игра
    markup.add(rps, bot_guess, user_guess, coin_flip, russian_roulette, tic_tac_toe)
    bot.send_message(message.chat.id, "Во что сыграем?", reply_markup=markup)

@bot.message_handler(commands=['start'])
def start(message):
    show_main_menu(message)

# --- Обработчик выбора игры ---
@bot.message_handler(func=lambda message: message.text in ["Камень, ножницы, бумага", "Бот угадывает число", "Я угадываю число", "Орел и решка", "Русская рулетка", "Крестики-нолики"])
def choose_game(message):
    if message.text == "Камень, ножницы, бумага":
        rock_paper_scissors(message)
    elif message.text == "Бот угадывает число":
        bot_guess_number(message)
    elif message.text == "Я угадываю число":
        user_guess_number(message)
    elif message.text == "Орел и решка":
        coin_flip(message)
    elif message.text == "Русская рулетка":
        russian_roulette(message)
    elif message.text == "Крестики-нолики":
        start_tic_tac_toe(message)

# --- Камень, ножницы, бумага ---
def rock_paper_scissors(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    rock = types.KeyboardButton("Камень")
    paper = types.KeyboardButton("Бумага")
    scissors = types.KeyboardButton("Ножницы")
    markup.add(rock, paper, scissors)
    bot.send_message(message.chat.id, "Выбери: Камень, Ножницы или Бумага?", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in ["Камень", "Бумага", "Ножницы"])
def handle_rps_choice(message):
    user_choice = message.text
    bot_choice = random.choice(["Камень", "Бумага", "Ножницы"])

    if user_choice == bot_choice:
        result = "Ничья!"
    elif (user_choice == "Камень" and bot_choice == "Ножницы") or \
         (user_choice == "Ножницы" and bot_choice == "Бумага") or \
         (user_choice == "Бумага" and bot_choice == "Камень"):
        result = "Ты выиграл!"
    else:
        result = "Я выиграл!"

    bot.send_message(message.chat.id, f"Ты выбрал: {user_choice}\nЯ выбрал: {bot_choice}\nРезультат: {result}", reply_markup=types.ReplyKeyboardRemove())
    show_main_menu(message)  # Возврат в главное меню

# --- Угадай число (Бот угадывает) ---
def bot_guess_number(message):
    global guess_min, guess_max, guess_number
    guess_min = 1
    guess_max = 100
    guess_number = (guess_min + guess_max) // 2  # Первое предположение

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    higher = types.KeyboardButton("Больше")
    lower = types.KeyboardButton("Меньше")
    correct = types.KeyboardButton("Угадал!")
    markup.add(higher, lower, correct)

    bot.send_message(message.chat.id, f"Задумай число от 1 до 100. Я буду его угадывать.\nМоё первое предположение: {guess_number}?", reply_markup=markup)

    bot.register_next_step_handler(message, handle_bot_guess_response)

def handle_bot_guess_response(message):
    global guess_min, guess_max, guess_number

    if message.text == "Больше":
        guess_min = guess_number + 1
    elif message.text == "Меньше":
        guess_max = guess_number - 1
    elif message.text == "Угадал!":
        bot.send_message(message.chat.id, "Ура! Я угадал!", reply_markup=types.ReplyKeyboardRemove())
        show_main_menu(message)  # Возврат в главное меню
        return
    else:
        bot.send_message(message.chat.id, "Не понимаю. Выбери 'Больше', 'Меньше' или 'Угадал!'", reply_markup=types.ReplyKeyboardRemove())
        return

    if guess_min > guess_max:
        bot.send_message(message.chat.id, "Ты меня обманываешь! Число не может быть одновременно больше и меньше!", reply_markup=types.ReplyKeyboardRemove())
        return

    guess_number = (guess_min + guess_max) // 2
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    higher = types.KeyboardButton("Больше")
    lower = types.KeyboardButton("Меньше")
    correct = types.KeyboardButton("Угадал!")
    markup.add(higher, lower, correct)
    bot.send_message(message.chat.id, f"Тогда моё следующее предположение: {guess_number}?", reply_markup=markup)
    bot.register_next_step_handler(message, handle_bot_guess_response)

# --- Угадай число (Пользователь угадывает) ---
def user_guess_number(message):
    global secret_number, attempts
    secret_number = random.randint(1, 100)
    attempts = 0
    bot.send_message(message.chat.id, "Я загадал число от 1 до 100. Попробуй угадать!")
    bot.register_next_step_handler(message, handle_user_guess)

def handle_user_guess(message):
    global secret_number, attempts
    try:
        guess = int(message.text)
        attempts += 1
        if guess < secret_number:
            bot.send_message(message.chat.id, "Больше!")
            bot.register_next_step_handler(message, handle_user_guess)
        elif guess > secret_number:
            bot.send_message(message.chat.id, "Меньше!")
            bot.register_next_step_handler(message, handle_user_guess)
        else:
            bot.send_message(message.chat.id, f"Ура! Ты угадал число {secret_number} за {attempts} попыток!", reply_markup=types.ReplyKeyboardRemove())
            show_main_menu(message)  # Возврат в главное меню

    except ValueError:
        bot.send_message(message.chat.id, "Пожалуйста, введи целое число от 1 до 100.")
        bot.register_next_step_handler(message, handle_user_guess)

# --- Орел и решка ---
def coin_flip(message):
    result = random.choice(["Орел", "Решка"])
    bot.send_message(message.chat.id, f"Подбрасываю монетку...\nВыпало: {result}", reply_markup=types.ReplyKeyboardRemove())
    show_main_menu(message)

# --- Русская рулетка ---
def russian_roulette(message):
    bot.send_message(message.chat.id, "Играем в русскую рулетку... Приготовьтесь!", reply_markup=types.ReplyKeyboardRemove())
    time.sleep(2)
    if random.randint(1, 6) == 1:
        bot.send_message(message.chat.id, "БАХ! Ты проиграл...", reply_markup=types.ReplyKeyboardRemove())
    else:
        bot.send_message(message.chat.id, "Щелк! Пронесло...", reply_markup=types.ReplyKeyboardRemove())
    show_main_menu(message)

# --- Крестики-нолики ---

def start_tic_tac_toe(message):
    global board, current_player
    board = ['⬜'] * 9  # Изначально заполняем доску белыми квадратами
    current_player = 'X'
    draw_board(message.chat.id)

def draw_board(chat_id):
    board_str = f"""
   {board[0]} | {board[1]} | {board[2]}
  ---+---+---
   {board[3]} | {board[4]} | {board[5]}
  ---+---+---
   {board[6]} | {board[7]} | {board[8]}
    """
    bot.send_message(chat_id, board_str, reply_markup=get_tic_tac_toe_markup())
    bot.send_message(chat_id, f"Ходит {current_player}. Выбери клетку (1-9).")

def get_tic_tac_toe_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    for i in range(1, 10):
        markup.add(types.KeyboardButton(str(i))) # Всегда добавляем номер кнопки, чтобы можно было нажать
    return markup


def handle_tic_tac_toe_move(message):
    global board, current_player
    try:
        move = int(message.text)
        if 1 <= move <= 9:
            if board[move - 1] == '❌' or board[move - 1] == '⭕':
                bot.send_message(message.chat.id, "Эта клетка уже занята. Выберите другую.")
                draw_board(message.chat.id)
                return
            board[move - 1] = get_emoji(current_player) # Ставим крестик или нолик
            if check_winner():
                draw_board(message.chat.id)  # Отображаем финальное состояние
                bot.send_message(message.chat.id, f"🎉 {current_player} выиграл! 🎉", reply_markup=types.ReplyKeyboardRemove())
                show_main_menu(message)
                return
            if '⬜' not in board: # Changed to check for white squares
                draw_board(message.chat.id)  # Отображаем финальное состояние
                bot.send_message(message.chat.id, "Ничья!", reply_markup=types.ReplyKeyboardRemove())
                show_main_menu(message)
                return

            # Ход бота
            current_player = 'O' if current_player == 'X' else 'X' # Переключаем игрока
            bot_move = get_bot_move()
            board[bot_move] = get_emoji('O')  # Бот ставит нолик

            if check_winner():
                draw_board(message.chat.id)  # Отображаем финальное состояние
                bot.send_message(message.chat.id, "🎉 Бот выиграл! 🎉", reply_markup=types.ReplyKeyboardRemove())
                show_main_menu(message)
                return
            if '⬜' not in board:  # Changed to check for white squares
                draw_board(message.chat.id)  # Отображаем финальное состояние
                bot.send_message(message.chat.id, "Ничья!", reply_markup=types.ReplyKeyboardRemove())
                show_main_menu(message)
                return

            current_player = 'X' # Снова делаем игрока - игроком
            draw_board(message.chat.id)

        else:
            bot.send_message(message.chat.id, "Неверный ход. Выбери клетку от 1 до 9.")
            draw_board(message.chat.id)  # Перерисовываем доску, чтобы показать текущее состояние
    except ValueError:
        bot.send_message(message.chat.id, "Пожалуйста, введите число от 1 до 9.")
        draw_board(message.chat.id)

def get_bot_move():
    # Простой ИИ: выбирает случайную свободную клетку
    available_moves = [i for i, cell in enumerate(board) if cell == '⬜']
    if not available_moves:
      available_moves = [i for i, cell in enumerate(board) if cell == ' ' ] # если белых квадратов не осталось

    return random.choice(available_moves)

def check_winner():
    winning_combinations = [
        (0, 1, 2), (3, 4, 5), (6, 7, 8),  # rows
        (0, 3, 6), (1, 4, 7), (2, 5, 8),  # columns
        (0, 4, 8), (2, 4, 6)  # diagonals
    ]
    for combo in winning_combinations:
        if board[combo[0]] == board[combo[1]] == board[combo[2]] != '⬜' and board[combo[0]] != ' ':
            return True
    return False


def get_emoji(player):
    if player == 'X':
        return '❌'
    elif player == 'O':
        return '⭕'
    else:
        return '⬜'  # Default to white square for empty cells


@bot.message_handler(func=lambda message: message.text.isdigit() and 1 <= int(message.text) <= 9)
def handle_tic_tac_toe_input(message):
    handle_tic_tac_toe_move(message)

# --- Запуск бота ---
if __name__ == '__main__':
    bot.infinity_polling()